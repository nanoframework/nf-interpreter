//
// Copyright (c) .NET Foundation and Contributors
// See LICENSE file in the project root for full license information.
//

#include <esp32_os.h>
#include "nf_rt_native.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// these functions are the real implementation of the 'weak' ones declared at src\CLR\Runtime.Native\nf_rt_native_nanoFramework_Runtime_Native_Rtc_stubs.cpp //
// the stubs for this class are generated by nanoFramework.Runtime.Native                                                                                    //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


HRESULT Library_nf_rt_native_nanoFramework_Runtime_Native_Rtc::Native_RTC_SetSystemTime___STATIC__BOOLEAN__I4__U1__U1__U1__U1__U1__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER();
    {
        struct tm newTime;

        newTime.tm_year = stack.Arg0().NumericByRef().s4 - 1900;        // years since 1900
        newTime.tm_mon = (uint8_t)stack.Arg1().NumericByRef().u1 - 1;   // months since January 0-11
        newTime.tm_mday = stack.Arg2().NumericByRef().u1;               // day of the month 1-31
        newTime.tm_wday = stack.Arg3().NumericByRef().u1;               // days since Sunday 0-6
        newTime.tm_hour = (uint32_t)stack.Arg4().NumericByRef().u1;     // hours since midnight 0-23
        newTime.tm_min = (uint32_t)stack.Arg5().NumericByRef().u1;      // minutes after the hour 0-59
        newTime.tm_sec = (uint32_t)stack.Arg6().NumericByRef().u1;      // seconds after the minute	 0-59

        time_t t = mktime(&newTime);
        struct timeval now = { .tv_sec = t, .tv_usec = 0 };
        settimeofday(&now, NULL);
            
        // Return value to the managed application
        stack.SetResult_Boolean(true);
    }
    NANOCLR_NOCLEANUP_NOLABEL();
}
