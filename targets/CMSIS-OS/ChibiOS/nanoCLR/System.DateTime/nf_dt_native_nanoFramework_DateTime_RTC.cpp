//
// Copyright (c) 2017 The nanoFramework project contributors
// Portions Copyright (c) Microsoft Corporation.  All rights reserved.
// See LICENSE file in the project root for full license information.
//
#include <ch.h>
#include <hal.h>
#include <cmsis_os.h>
#include "nf_dt_native.h"


/////////////////////////////////////////////////////////////////////////////
// the stubs for this class are generated by nanoFramework.System.DateTime //
/////////////////////////////////////////////////////////////////////////////


HRESULT Library_nf_dt_native_nanoFramework_DateTime_RTC::Native_RTC_SetSystemTime___STATIC__BOOLEAN__I4__U1__U1__U1__U1__U1__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER();
    {
        RTCDateTime newTime;

        newTime.year = stack.Arg0().NumericByRef().s4 - 1980;  // ChibiOS time base is 1980-01-01
        newTime.month = (uint8_t)stack.Arg1().NumericByRef().u1;
        newTime.day = stack.Arg2().NumericByRef().u1;
        newTime.dayofweek = stack.Arg3().NumericByRef().u1;
        newTime.millisecond = ((((uint32_t)stack.Arg4().NumericByRef().u1 * 3600) + 
                                ((uint32_t)stack.Arg5().NumericByRef().u1 * 60) + 
                                (uint32_t)stack.Arg6().NumericByRef().u1) * 1000);

        // set RTC time
        rtcSetTime(&RTCD1, &newTime);
        
        // Return value to the managed application
        stack.SetResult_Boolean(true);
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nf_dt_native_nanoFramework_DateTime_RTC::Native_RTC_SetAlarm___STATIC__BOOLEAN__I4__U1__U1__U1__U1__U1__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER();
    {
        NANOCLR_SET_AND_LEAVE(stack.NotImplementedStub());

        // FIXME replace with proper code to set alarm time
        // // perform conversion to RTCDateTime
        // RTCAlarm alarmspec;
       
        // /* first disable all alrams if any */
        // rtcSetAlarm(&RTCD1, 0, NULL);
        // rtcSetAlarm(&RTCD1, 1, NULL);

        // // Return value to the managed application
        // stack.SetResult_Boolean(true);
    }
    NANOCLR_NOCLEANUP();
}
