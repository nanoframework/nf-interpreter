//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "windows_devices_gpio_native.h"
#include "windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider.h"

using namespace Windows::Devices::Gpio;


HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::Read___WindowsDevicesGpioProviderGpioPinValue( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int retVal = DefaultGpioPinProvider::Read( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::Write___VOID__WindowsDevicesGpioProviderGpioPinValue( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        DefaultGpioPinProvider::Write( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::get_DebounceTimeout___mscorlibSystemTimeSpan( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        UNSUPPORTED_TYPE retVal = DefaultGpioPinProvider::get_DebounceTimeout( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
        //SetResult_UNSUPPORTED_TYPE( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::set_DebounceTimeout___VOID__mscorlibSystemTimeSpan( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        UNSUPPORTED_TYPE param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UNSUPPORTED_TYPE( stack, 1, param0 ) );

        DefaultGpioPinProvider::set_DebounceTimeout( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::InternalSetDriveMode___VOID__WindowsDevicesGpioProviderGpioPinDriveMode( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        DefaultGpioPinProvider::InternalSetDriveMode( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::NativeOpenpin___BOOLEAN__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        bool retVal = DefaultGpioPinProvider::NativeOpenpin( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::NativeIsDriveModeSupported___BOOLEAN__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        unsigned char param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 1, param0 ) );

        bool retVal = DefaultGpioPinProvider::NativeIsDriveModeSupported( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_windows_devices_gpio_native_Windows_Devices_Gpio_DefaultGpioPinProvider::NativeDispose___VOID( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        DefaultGpioPinProvider::NativeDispose( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}
