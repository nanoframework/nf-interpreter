trigger:
  branches:
    include: ["master", "*"]  
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml"]

pr:
  branches:
    include: [ "*" ]

jobs:

  # STM32
- job: Build STM32 targets
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path $(env.TEMP) nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud -a -c
    displayName: Set build number
    condition: ne(variables['system.pullrequest.isfork'], true)

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'Install-Module 7Zip4PowerShell -Force'
    displayName: Install 7Zip4PowerShell

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'Write-Host ("##vso[task.setvariable variable=GNU_GCC_TOOLCHAIN_PATH;]$env:Agent_TempDirectory\GNU_Tools_ARM_Embedded")`Write-Host ("##vso[task.setvariable variable=NINJA_PATH;]$env:Agent_TempDirectory\ninja")`Write-Host ("##vso[task.setvariable variable=HEX2DFU_PATH;]$env:Agent_TempDirectory\hex2dfu")'
    displayName: Set variables

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-arm-gcc-toolchain.ps1'
    displayName: Install ARM GCC toolchain

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-ninja.ps1'
    displayName: Install Ninja

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-nf-hex2dfu.ps1'
    displayName: Install HEX2DFU

# ESP32 targets
- job: Build ESP32 targets
  pool:
    vmImage: 'VS2017-Win2016'

  steps:

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'Write-Host ("##vso[task.setvariable variable=ESP32_TOOLCHAIN_PATH;]$env:Agent_TempDirectory\ESP32_Tools")`Write-Host ("##vso[task.setvariable variable=NINJA_PATH;]$env:Agent_TempDirectory\ninja")`Write-Host ("##vso[task.setvariable variable=ESP32_TOOLS_PATH;]$env:Agent_TempDirectory\ESP32_Tools")`Write-Host ("##vso[task.setvariable variable=ESP32_LIBS_PATH;]$env:Agent_TempDirectory\ESP32_Tools\libs-v3.1")`Write-Host ("##vso[task.setvariable variable=ESP32_IDF_PATH;]$env:Agent_TempDirectory\ESP32_Tools\esp-idf-v3.1")'
    displayName: Set variables

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-esp32-toolchain.ps1'
    displayName: Install ESP32 toolchain

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-ninja.ps1'
    displayName: Install Ninja

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-esp32-libs.ps1'
    displayName: Install ESP32 libraries

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: 'install-esp32-idf.ps1'
    displayName: Install ESP32 IDF sdk

# WIN32 
- job: Build WIN32 nanoCLR
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: NuGetToolInstaller@0

  - task: VSBuild@1
    inputs:
      solution: 'targets\os\win32\nanoCLR.sln'
      platform: 'Any CPU'
      configuration: 'Release'


# steps:
# - task: NuGetToolInstaller@0

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'
#     feedsToUse: config
#     nugetConfigPath: source/NuGet.config

# - task: DotNetCoreCLI@2  
#   inputs:
#     command: custom
#     custom: tool
#     arguments: install --tool-path $(env.TEMP) nbgv
#   displayName: Install NBGV tool

# - script: nbgv cloud -a -c
#   displayName: Set build number
#   condition: ne(variables['system.pullrequest.isfork'], true)

# # install nanoFramework VS extension
# - task: PowerShell@2
#   inputs:
#     filePath: 'install-nf-vs-extension.ps1'
#     errorActionPreference: 'stop'

# # Batch Script
# - task: BatchScript@1
#   inputs:
#     filename: '$(INSTALLER_PATH)'

# # Run a command line script using cmd.exe on Windows and bash on macOS and Linux.
# - task: CmdLine@2
#   inputs:
#     script: '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\VSIXInstaller.exe" /q D:\a\_temp\nanoFramework.Tools.VS2017.Extension.vsix'
#     #workingDirectory: # Optional
#     #failOnStderr: false # Optional

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: CopyFiles@1
#   inputs:
#     sourceFolder: $(System.DefaultWorkingDirectory)
#     Contents: |
#       **source\Nuget.*\*.nupkg
#     TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
#     flattenFolders: true
#   displayName: Collecting deployable artifacts

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
#     ArtifactName: deployables
#     ArtifactType: Container
#   displayName: Publish deployables artifacts
