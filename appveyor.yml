# configuration for all branches

image: Visual Studio 2017

skip_tags: false

skip_branch_with_pr: true

test: off

pull_requests:
  do_not_increment_build_number: true

# Skipping commits affecting specific files
skip_commits:
  files:
  - '**\AssemblyInfo.*'
  - '**/*.md'
  - '**/*.cs'
  - '**/*.json'
  - 'LICENSE'
  - dir/*
  - '.gitignore'
  - targets-community/*

build:
  verbosity: minimal

environment:
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  GNU_GCC_TOOLCHAIN_PATH: 'C:\GNU_Tools_ARM_Embedded'
  ESP32_TOOLCHAIN_PATH: 'C:\ESP32_Tools\1.22.0-80'
  NINJA_PATH: 'C:\mytools\ninja'
  HEX2DFU_PATH: 'C:\mytools\hex2dfu'
  ESP32_TOOLS_PATH: 'C:/ESP32_TOOLS'
  ESP32_LIBS_PATH: '%ESP32_TOOLS_PATH%/libs-v3.1'
  ESP32_IDF_PATH: '%ESP32_TOOLS_PATH%/esp-idf-v3.1'
  BOARD_NAME: ''
  BUILD_OPTIONS: ''
  NEEDS_DFU: 'False'
  RUBY_VERSION: 24
  GitHubUserName:
    secure: 7OBtVAMTodMWK20wg6pGnQ==
  GitHubUserEmail:
    secure: /NpmL1KqwHyHFnF0GlUovA586wDIt8Hg/Q8Dro6kUpk=
  GitHubToken:
    secure: i/2hGsqVMwzdM5yIS4rxOIeG3ftx7su7klWYN80s/fHvgk7A5H2fF3oUTNLcyTbw
  GitRestAuth:
    secure: E3bCMe4LtDdAhHSYRcLp0N6DixJe1m8TNxhYeJW/GnqM3WXdRqsgkHSbwootPjJQtOQJrps4twmzTVzofLSVgPgbzU8PxU0AkJV7zwkyVOE=
  BinTrayKey:
    secure: Wz0wwFOzMkDwwzzax1HPzKZB3r/aTprlleqFYX5arxpH9pP3D9glINxEuY+P/BaN

  matrix:
    - BOARD_NAME: 'STM32'
    - BOARD_NAME: 'ESP32_DEVKITC'
      BUILD_OPTIONS: '-DTARGET_SERIES=ESP32 -DRTOS=FREERTOS -DNF_WP_IMPLEMENTS_CRC32=OFF -DNF_FEATURE_DEBUGGER=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON -DAPI_Windows.Devices.SerialCommunication=ON -DAPI_Windows.Devices.Adc=ON -DAPI_System.Net=ON -DAPI_Windows.Devices.Wifi=ON -DNF_SECURITY_OPENSSL=ON -DAPI_Hardware.Esp32=ON -DSUPPORT_ANY_BASE_CONVERSION=ON'
    - BOARD_NAME: 'NANOCLR_WINDOWS'

matrix:
  fast_finish: true

configuration:
  - MinSizeRel

init:
- git config --global core.autocrlf true
- git config --global credential.helper store
- ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubToken):x-oauth-basic@github.com`n"
- git config --global user.email "%GitHubUserEmail%"
- git config --global user.name "%GitHubUserName%"
- ps: "$headers = if($env:APPVEYOR_PULL_REQUEST_NUMBER){\n @{\n  \"Authorization\" = \"Basic $env:GitRestAuth\"\n  \"Content-type\" = \"application/json\"\n}\n\n$pr = Invoke-RestMethod -Uri \"https://api.github.com/repos/$env:APPVEYOR_REPO_NAME/pulls/$env:APPVEYOR_PULL_REQUEST_NUMBER\" -Headers $headers  -Method GET\n\nif($pr.user.login -eq \"nfbot\" -and $pr.body -like \"*[version update]*\")\n{\n    # commit was from nfbot AND it's taged as a [version update]\n    # OK to skip AppVeyor build \n    \"Version update only. Skipping build.\" | Write-Host -BackgroundColor White -ForegroundColor Blue\n    Exit-AppveyorBuild\n} }\n"
- ps: "if($env:APPVEYOR_PULL_REQUEST_NUMBER -eq \"\")\n{\n   \n    if($env:APPVEYOR_REPO_COMMIT_AUTHOR -eq \"nfbot\" -and $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED -like \"*[version update]*\")\n    {\n        # commit was from nfbot AND it's taged as a [version update]\n        # OK to skip AppVeyor build \n        \"Version update only. Skipping build.\" | Write-Host -BackgroundColor White -ForegroundColor Blue\n        Exit-AppveyorBuild\n    }\n}"

cache:
- '%GNU_GCC_TOOLCHAIN_PATH%'
- '%ESP32_TOOLCHAIN_PATH%'

install:
- set PATH=C:\Ruby%RUBY_VERSION%\bin;%PATH%
- set PATH=%NINJA_PATH%;%PATH%
- gem install github_changelog_generator --quiet --no-ri --no-rdoc
- choco install gitversion.portable -pre -y
- ps: |

    If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
    {
      # nothing to install for this build
    }
    ElseIf($env:BOARD_NAME -eq "ESP32_DEVKITC")
    {
      .\install-esp32-toolchain.ps1
      .\install-ninja.ps1
      .\install-esp32-libs.ps1
      .\install-esp32-idf.ps1
    }
    Else
    {
      # get build matrix
      .\get-stm32-targets-to-build.ps1

      # install tools and utilities
      .\install-arm-gcc-toolchain.ps1
      .\install-ninja.ps1
      .\install-nf-hex2dfu.ps1
    }

before_build:
- md build
- ps: |

    If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
    {
      # nothing to do for this build
    }
    Else
    {
      C:\ProgramData\chocolatey\lib\GitVersion.Portable\tools\GitVersion.exe /l console /output buildserver

      cd build
      $cmake = "cmake"

      If($env:BOARD_NAME -eq "ESP32_DEVKITC")
      {
        # need to split the build options into an array to properly pass those as CMake arguments
        $separator = " "
        $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
        $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

        &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:ESP32_TOOLCHAIN_PATH" "-DESP32_IDF_PATH=$env:ESP32_IDF_PATH" "-DESP32_LIBS_PATH=$env:ESP32_LIBS_PATH" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
      }
      Else
      {
        if(!$global:BUILD_MATRIX)
        {
          # need to split the build options into an array to properly pass those as CMake arguments
          $separator = " "
          $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
          $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

          If($env:NEEDS_DFU -eq 'True')
          {
            $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
          }

          &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
        }
      }
    }

build_script:
- ps: |

    Install-Module 7Zip4PowerShell -Force

    If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
    {
      msbuild targets\os\win32\nanoCLR.sln /p:Configuration=Release /p:Platform=x86 /m /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
    }
    Else
    {
      If($env:BOARD_NAME -eq "ESP32_DEVKITC")
      {
        $cmake = "cmake"
        &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

        if ($lastexitcode -ne 0)
        {
          throw [System.Exception] "CMake build failed with exit code $lastexitcode."
        }

        Copy-Item -Path $env:ESP32_LIBS_PATH\bootloader.bin -Destination bootloader.bin
        Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
        Push-AppveyorArtifact $env:BOARD_NAME-$env:GitVersion_SemVer.zip

        # upload package only if this not a PR 
        # and this is 'develop' (not develop-something) or release or master
        if(!$env:APPVEYOR_PULL_REQUEST_NUMBER -and 
            ( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
              $env:APPVEYOR_REPO_BRANCH -match "^release*" -or
              $env:APPVEYOR_REPO_BRANCH -eq "master"
            ))
        {
          # get bintray repo name (dev or stable)
          $images_repo = "nanoframework-images"

          if( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
              $env:APPVEYOR_REPO_BRANCH -match "^release*")
          {
            $images_repo += "-dev"
          }

          try
          {
            $webClient = New-Object System.Net.WebClient
            $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
            $webClient.UploadFile("https://api.bintray.com/content/nfbot/$images_repo/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
          }
          catch
          {
            & $env:APPVEYOR_BUILD_FOLDER\appveyor-discord.ps1 warning $env:APPVEYOR_DISCORD_WEBHOOK_URL "Failed to upload package for $env:BOARD_NAME."
          }
        }
      }
      Else
      {
        # STM32 target
        if(!$global:BUILD_MATRIX)
        {
          # single STM32 target
          $cmake = "cmake"
          &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

          if ($lastexitcode -ne 0)
          {
            throw [System.Exception] "CMake build failed with exit code $lastexitcode."
          }

          Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
          Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
          Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
          If($env:NEEDS_DFU -eq 'True')
          {
            Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
          }
          Push-AppveyorArtifact $env:BOARD_NAME-$env:GitVersion_SemVer.zip

          # upload package only if this not a PR 
          # and this is 'develop' (not develop-something) or release or master
          if(!$env:APPVEYOR_PULL_REQUEST_NUMBER -and 
              ( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
                $env:APPVEYOR_REPO_BRANCH -match "^release*" -or
                $env:APPVEYOR_REPO_BRANCH -eq "master"
              ))
          {
            # get bintray repo name (dev or stable)
            $images_repo = "nanoframework-images"

            if( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
                $env:APPVEYOR_REPO_BRANCH -match "^release*")
            {
              $images_repo += "-dev"
            }
            
            try
            {
              $webClient = New-Object System.Net.WebClient
              $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
              $webClient.UploadFile("https://api.bintray.com/content/nfbot/$images_repo/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
            }
            catch
            {
              & $env:APPVEYOR_BUILD_FOLDER\appveyor-discord.ps1 warning $env:APPVEYOR_DISCORD_WEBHOOK_URL "Failed to upload package for $env:BOARD_NAME."
            }
          }
        }
        else
        {
          # build matrix for STM32 targets
          ForEach($item in $global:BUILD_MATRIX)
          {
            $env:BOARD_NAME = $item[0]
            $env:BUILD_OPTIONS = $item[1]
            $env:NEEDS_DFU = $item[2]

            $cmake = "cmake"

            # need to split the build options into an array to properly pass those as CMake arguments
            $separator = " "
            $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
            $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

            If($env:NEEDS_DFU -eq 'True')
            {
                $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
            }

            &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..

            &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

            if ($lastexitcode -ne 0)
            {
              throw [System.Exception] "CMake build failed with exit code $lastexitcode."
            }

            Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
            Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
            Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
            If($env:NEEDS_DFU -eq 'True')
            {
              Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
            }
            Push-AppveyorArtifact $env:BOARD_NAME-$env:GitVersion_SemVer.zip

            # upload package only if this not a PR 
            # and this is 'develop' (not develop-something) or release or master
            if(!$env:APPVEYOR_PULL_REQUEST_NUMBER -and 
                ( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
                  $env:APPVEYOR_REPO_BRANCH -match "^release*" -or
                  $env:APPVEYOR_REPO_BRANCH -eq "master"
                ))
            {
              # get bintray repo name (dev or stable)
              $images_repo = "nanoframework-images"

              if( $env:APPVEYOR_REPO_BRANCH -eq "develop" -or 
                  $env:APPVEYOR_REPO_BRANCH -match "^release*")
              {
                $images_repo += "-dev"
              }
              
              try
              {
                $webClient = New-Object System.Net.WebClient
                $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                $webClient.UploadFile("https://api.bintray.com/content/nfbot/$images_repo/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
              }
              catch
              {
                & $env:APPVEYOR_BUILD_FOLDER\appveyor-discord.ps1 warning $env:APPVEYOR_DISCORD_WEBHOOK_URL "Failed to upload package for $env:BOARD_NAME."
              }
            }

            cd ..
            Rename-Item -NewName build-$env:BOARD_NAME -Path "build" -Force
            md build
            cd build
          }
        }            
      }          
    }

# requires APPVEYOR_DISCORD_WEBHOOK_URL enviroment variable set with Discord webhook URL
on_failure:
  - ps: |
  
      & $env:APPVEYOR_BUILD_FOLDER\appveyor-discord.ps1 failure $env:APPVEYOR_DISCORD_WEBHOOK_URL

before_deploy:
- ps: .\generate-change-log.ps1
