# configuration for "master" branch
-
  branches:
    only:
      - master

  # Skipping commits affecting specific files 
  skip_commits:
    files:
    - '**\AssemblyInfo.*'
    - '**/*.md'
    - 'LICENSE'
    - dir/*
    - '.gitignore'
    - targets-community/*

  image: Visual Studio 2017

  init:
    - git config --global core.autocrlf true
    - git config --global credential.helper store
    - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubToken):x-oauth-basic@github.com`n"
    - git config --global user.email "%GitHubUserEmail%"
    - git config --global user.name "%GitHubUserName%"

  configuration:
    - MinSizeRel

  environment:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    GNU_GCC_TOOLCHAIN_PATH: 'C:\GNU_Tools_ARM_Embedded\7-2017-q4-major'
    ESP32_TOOLCHAIN_PATH: 'C:\ESP32_Tools\1.22.0-75'
    NINJA_PATH: 'C:\mytools\ninja'
    HEX2DFU_PATH: 'C:\mytools\hex2dfu'
    ESP32_TOOLS_PATH: 'C:\ESP32_TOOLS'
    ESP32_LIBS_PATH: '%ESP32_TOOLS_PATH%\libs'
    ESP32_IDF_PATH: '%ESP32_TOOLS_PATH%\esp-idf-v3.0-rc1'
    BOARD_NAME: ''
    BUILD_OPTIONS: ''
    NEEDS_DFU: 'False'
    RUBY_VERSION: 24
    GitHubUserName:
      secure: 7OBtVAMTodMWK20wg6pGnQ==
    GitHubUserEmail:
      secure: HeABB68Sn/Lhbd69C2cUcfWv0ab/rMDEcOLvcxf8gGw=
    GitHubToken:
      secure: WOqlCsnwTzfDPJFoNV/h8mEESIpG/9uFn1u6oE8hGZtXwIQQlsY+NyyLt9Y5xoFn
    BinTrayKey:
      secure: Wz0wwFOzMkDwwzzax1HPzKZB3r/aTprlleqFYX5arxpH9pP3D9glINxEuY+P/BaN

    matrix:
      - BOARD_NAME: 'ST_STM32F4_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'ST_STM32F429I_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'ST_NUCLEO64_F091RC'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F0xx -DRTOS=CHIBIOS -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=OFF'
      - BOARD_NAME: 'ST_NUCLEO144_F746ZG'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F7xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'MBN_QUAIL'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON -DAPI_Windows.Devices.SerialCommunication=ON'
        NEEDS_DFU: 'True'
      - BOARD_NAME: 'ST_STM32F769I_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F7xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON -DAPI_Windows.Devices.SerialCommunication=ON'
      - BOARD_NAME: 'NETDUINO3_WIFI'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.Pwm=ON'
        NEEDS_DFU: 'True'

  matrix:
    fast_finish: true

  cache:
    - '%GNU_GCC_TOOLCHAIN_PATH%'

  install:
    - set PATH=C:\Ruby%RUBY_VERSION%\bin;%PATH%
    - set PATH=%NINJA_PATH%;%PATH%

    - gem install github_changelog_generator --quiet --no-ri --no-rdoc
    - choco install gitversion.portable -pre -y

    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {

        }
        ElseIf($env:BOARD_NAME -eq "ESP32_DEVKITC")
        {
          .\install-esp32-toolchain.ps1
          .\install-ninja.ps1
          .\install-esp32-libs.ps1
          .\install-esp32-idf.ps1
        }
        Else
        {
          # get build matrix
          .\get-stm32-targets-to-build.ps1

          # install tools and utilities
          .\install-arm-gcc-toolchain.ps1
          .\install-ninja.ps1
          .\install-nf-hex2dfu.ps1
        }

  build:
    verbosity: minimal

  before_build:
    - md build
    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
        
        }
        Else
        {
          gitversion /l console /output buildserver

          cd build
          $cmake = "cmake"

          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            # need to split the build options into an array to properly pass those as CMake arguments
            $separator = " "
            $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
            $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

             &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:ESP32_TOOLCHAIN_PATH" "-DESP32_IDF_PATH=$env:ESP32_IDF_PATH" "-DESP32_LIBS_PATH=$env:ESP32_LIBS_PATH" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
          }
          Else
          {
            if(!$global:BUILD_MATRIX)
            {
              # need to split the build options into an array to properly pass those as CMake arguments
              $separator = " "
              $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
              $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

              If($env:NEEDS_DFU -eq 'True')
              {
                $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
              }

              &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
            }
          }
        }

  build_script:
    - ps: |

        Install-Module 7Zip4PowerShell -Force

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
          msbuild targets\os\win32\nanoCLR.sln /p:Configuration=Release /p:Platform=x86 /m /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        }
        Else
        {
          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            $cmake = "cmake"
            &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

            if ($lastexitcode -ne 0)
            {
              throw [System.Exception] "CMake build failed with exit code $lastexitcode."
            }

            Copy-Item -Path $env:ESP32_LIBS_PATH\bootloader.bin -Destination bootloader.bin
            Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion

            #upload package only if this not a PR
            if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
            {
              $webClient = New-Object System.Net.WebClient
              $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
              $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
            }
          }
          Else
          {
            # STM32 target
            if(!$global:BUILD_MATRIX)
            {
              # single STM32 target
              $cmake = "cmake"
              &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

              if ($lastexitcode -ne 0)
              {
                throw [System.Exception] "CMake build failed with exit code $lastexitcode."
              }

              Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
              Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              If($env:NEEDS_DFU -eq 'True')
              {
                Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              }

              #upload package only if this not a PR
              if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
              {
                $webClient = New-Object System.Net.WebClient
                $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
              }
            }
            else
            {
              # build matrix for STM32 targets
              ForEach($item in $global:BUILD_MATRIX)
              {
                $env:BOARD_NAME = $item[0]
                $env:BUILD_OPTIONS = $item[1]
                $env:NEEDS_DFU = $item[2]

                $cmake = "cmake"

                # need to split the build options into an array to properly pass those as CMake arguments
                $separator = " "
                $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
                $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

                If($env:NEEDS_DFU -eq 'True')
                {
                    $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
                }

                &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions ..

                &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

                if ($lastexitcode -ne 0)
                {
                  throw [System.Exception] "CMake build failed with exit code $lastexitcode."
                }

                Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
                Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                If($env:NEEDS_DFU -eq 'True')
                {
                  Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                }
                
                #upload package only if this not a PR
                if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
                {
                  $webClient = New-Object System.Net.WebClient
                  $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                  $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
                }

                cd ..
                Rename-Item -NewName build-$env:BOARD_NAME -Path "build" -Force
                md build
                cd build
              }
            }            
          }          
        }

  test: off

  artifacts:
    - path: '**\*.zip'
      name: nanoImage

  # before_deploy:
  #   # need this to keep ruby happy
  #   - ps: md c:\tmp
  #   - bundle exec github_changelog_generator --token %GitHubToken%
  #   # add here the updated changelog and the updated assembly info files
  #   - git add .
  #   - git commit --amend --no-edit

  notifications:
    - provider: Slack
      auth_token:
        secure: 2tqAJTTbN2dm24Vrwo5TXun3Vxc34R5G9l7o3pK3xEuKZAzxx3nbP2yGkMI/kl3+NxHXknjBfZnkhZC5eLYBHb+jO7YVUZwPYOfC/ZGy5HU=
      channel: '#build-monitor'
      on_build_status_changed: true
      on_build_success: false
      on_build_failure: false


####################################
# configuration for develop branches
-
  branches:
    only:
      - /dev.*/

  skip_branch_with_pr: true

  # Do not build on tags
  skip_tags: false
  
  pull_requests:
    do_not_increment_build_number: true

  # Skipping commits affecting specific files
  skip_commits:
    files:
    - '**\AssemblyInfo.*'
    - '**/*.md'
    - 'LICENSE'
    - dir/*
    - '.gitignore'
    - targets-community/*

  image: Visual Studio 2017

  init:
    - git config --global core.autocrlf true
    - git config --global credential.helper store
    - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubToken):x-oauth-basic@github.com`n"
    - git config --global user.email "%GitHubUserEmail%"
    - git config --global user.name "%GitHubUserName%"

  configuration:
    - Debug

  environment:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    GNU_GCC_TOOLCHAIN_PATH: 'C:\GNU_Tools_ARM_Embedded\7-2017-q4-major'
    ESP32_TOOLCHAIN_PATH: 'C:\ESP32_Tools\1.22.0-75'
    NINJA_PATH: 'C:\mytools\ninja'
    HEX2DFU_PATH: 'C:\mytools\hex2dfu'
    ESP32_TOOLS_PATH: 'C:\ESP32_TOOLS'
    ESP32_LIBS_PATH: '%ESP32_TOOLS_PATH%\libs'
    ESP32_IDF_PATH: '%ESP32_TOOLS_PATH%\esp-idf-v3.0-rc1'
    BOARD_NAME: ''
    BUILD_OPTIONS: ''
    NEEDS_DFU: 'False'
    RUBY_VERSION: 24
    GitHubUserName:
      secure: 7OBtVAMTodMWK20wg6pGnQ==
    GitHubUserEmail:
      secure: HeABB68Sn/Lhbd69C2cUcfWv0ab/rMDEcOLvcxf8gGw=
    GitHubToken:
      secure: WOqlCsnwTzfDPJFoNV/h8mEESIpG/9uFn1u6oE8hGZtXwIQQlsY+NyyLt9Y5xoFn
    BinTrayKey:
      secure: Wz0wwFOzMkDwwzzax1HPzKZB3r/aTprlleqFYX5arxpH9pP3D9glINxEuY+P/BaN

    matrix:
      - BOARD_NAME: 'STM32'
      - BOARD_NAME: 'ESP32_DEVKITC'
        BUILD_OPTIONS: '-DTARGET_SERIES=ESP32 -DRTOS=FREERTOS -DNF_FEATURE_DEBUGGER=TRUE -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.I2c=ON -DAPI_Windows.Devices.SerialCommunication=ON'
      - BOARD_NAME: 'NANOCLR_WINDOWS'

  matrix:
    fast_finish: true

  cache:
    - '%GNU_GCC_TOOLCHAIN_PATH%'
    - '%ESP32_TOOLCHAIN_PATH%'
 
  install:
    - set PATH=C:\Ruby%RUBY_VERSION%\bin;%PATH%
    - set PATH=%NINJA_PATH%;%PATH%

    - gem install github_changelog_generator --quiet --no-ri --no-rdoc
    - choco install gitversion.portable -pre -y

    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {

        }
        ElseIf($env:BOARD_NAME -eq "ESP32_DEVKITC")
        {
          .\install-esp32-toolchain.ps1
          .\install-ninja.ps1
          .\install-esp32-libs.ps1
          .\install-esp32-idf.ps1
        }
        Else
        {
          # get build matrix
          .\get-stm32-targets-to-build.ps1

          # install tools and utilities
          .\install-arm-gcc-toolchain.ps1
          .\install-ninja.ps1
          .\install-nf-hex2dfu.ps1
        }

  build:
    verbosity: minimal

  before_build:
    - md build
    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
        
        }
        Else
        {
          gitversion /l console /output buildserver

          cd build
          $cmake = "cmake"

          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            # need to split the build options into an array to properly pass those as CMake arguments
            $separator = " "
            $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
            $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

             &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:ESP32_TOOLCHAIN_PATH" "-DESP32_IDF_PATH=$env:ESP32_IDF_PATH" "-DESP32_LIBS_PATH=$env:ESP32_LIBS_PATH" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
          }
          Else
          {
            if(!$global:BUILD_MATRIX)
            {
              # need to split the build options into an array to properly pass those as CMake arguments
              $separator = " "
              $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
              $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

              If($env:NEEDS_DFU -eq 'True')
              {
                $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
              }

              &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
            }
          }
        }

  build_script:
    - ps: |

        Install-Module 7Zip4PowerShell -Force

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
          msbuild targets\os\win32\nanoCLR.sln /p:Configuration=Release /p:Platform=x86 /m /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        }
        Else
        {
          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            $cmake = "cmake"
            &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

            if ($lastexitcode -ne 0)
            {
              throw [System.Exception] "CMake build failed with exit code $lastexitcode."
            }

            Copy-Item -Path $env:ESP32_LIBS_PATH\bootloader.bin -Destination bootloader.bin
            Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion

            #upload package only if this not a PR
            if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
            {
              $webClient = New-Object System.Net.WebClient
              $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
              $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
            }
          }
          Else
          {
            # STM32 target
            if(!$global:BUILD_MATRIX)
            {
              # single STM32 target
              $cmake = "cmake"
              &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

              if ($lastexitcode -ne 0)
              {
                throw [System.Exception] "CMake build failed with exit code $lastexitcode."
              }

              Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
              Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              If($env:NEEDS_DFU -eq 'True')
              {
                Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              }

              #upload package only if this not a PR
              if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
              {
                $webClient = New-Object System.Net.WebClient
                $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
              }
            }
            else
            {
              # build matrix for STM32 targets
              ForEach($item in $global:BUILD_MATRIX)
              {
                $env:BOARD_NAME = $item[0]
                $env:BUILD_OPTIONS = $item[1]
                $env:NEEDS_DFU = $item[2]

                $cmake = "cmake"

                # need to split the build options into an array to properly pass those as CMake arguments
                $separator = " "
                $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
                $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

                If($env:NEEDS_DFU -eq 'True')
                {
                    $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
                }

                &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions ..

                &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

                if ($lastexitcode -ne 0)
                {
                  throw [System.Exception] "CMake build failed with exit code $lastexitcode."
                }

                Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
                Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                If($env:NEEDS_DFU -eq 'True')
                {
                  Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                }
                
                #upload package only if this not a PR
                if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
                {
                  $webClient = New-Object System.Net.WebClient
                  $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                  $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
                }

                cd ..
                Rename-Item -NewName build-$env:BOARD_NAME -Path "build" -Force
                md build
                cd build
              }
            }            
          }          
        }

  test: off

  artifacts:
    - path: '**\*.zip'
      name: nanoImage


  # before_deploy:
  #   # need this to keep ruby happy
  #   - ps: md c:\tmp
  #   - bundle exec github_changelog_generator --token %GitHubToken%
  #   # add here the updated changelog and the updated assembly info files
  #   - git add .
  #   - git commit --amend --no-edit

  notifications:
    - provider: Slack
      auth_token:
        secure: 2tqAJTTbN2dm24Vrwo5TXun3Vxc34R5G9l7o3pK3xEuKZAzxx3nbP2yGkMI/kl3+NxHXknjBfZnkhZC5eLYBHb+jO7YVUZwPYOfC/ZGy5HU=
      channel: '#build-monitor'
      on_build_status_changed: true
      on_build_success: false
      on_build_failure: false

############################################
# configuration for release candidate branch
-
  branches:
    only:
      - release.*

  pull_requests:
    do_not_increment_build_number: true

  skip_branch_with_pr: true

  # Skipping commits affecting specific files
  skip_commits:
    files:
    - '**\AssemblyInfo.*'
    - '**/*.md'
    - 'LICENSE'
    - dir/*
    - '.gitignore'
    - targets-community/*

  image: Visual Studio 2017

  init:
    - git config --global core.autocrlf true
    - git config --global credential.helper store
    - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubToken):x-oauth-basic@github.com`n"
    - git config --global user.email "%GitHubUserEmail%"
    - git config --global user.name "%GitHubUserName%"

  configuration:
    - MinSizeRel

  environment:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    GNU_GCC_TOOLCHAIN_PATH: 'C:\GNU_Tools_ARM_Embedded\7-2017-q4-major'
    ESP32_TOOLCHAIN_PATH: 'C:\ESP32_Tools\1.22.0-75'
    NINJA_PATH: 'C:\mytools\ninja'
    HEX2DFU_PATH: 'C:\mytools\hex2dfu'
    ESP32_TOOLS_PATH: 'C:\ESP32_TOOLS'
    ESP32_LIBS_PATH: '%ESP32_TOOLS_PATH%\libs'
    ESP32_IDF_PATH: '%ESP32_TOOLS_PATH%\esp-idf-v3.0-rc1'
    BOARD_NAME: ''
    BUILD_OPTIONS: ''
    NEEDS_DFU: 'False'
    RUBY_VERSION: 24
    GitHubUserName:
      secure: 7OBtVAMTodMWK20wg6pGnQ==
    GitHubUserEmail:
      secure: HeABB68Sn/Lhbd69C2cUcfWv0ab/rMDEcOLvcxf8gGw=
    GitHubToken:
      secure: WOqlCsnwTzfDPJFoNV/h8mEESIpG/9uFn1u6oE8hGZtXwIQQlsY+NyyLt9Y5xoFn
    BinTrayKey:
      secure: Wz0wwFOzMkDwwzzax1HPzKZB3r/aTprlleqFYX5arxpH9pP3D9glINxEuY+P/BaN

    matrix:
      - BOARD_NAME: 'ST_STM32F4_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'ST_STM32F429I_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'ST_NUCLEO64_F091RC'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F0xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=OFF'
      - BOARD_NAME: 'ST_NUCLEO144_F746ZG'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F7xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Pwm=ON'
      - BOARD_NAME: 'MBN_QUAIL'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Spi=ON -DAPI_Windows.Devices.Pwm=ON'
        NEEDS_DFU: 'True'
      - BOARD_NAME: 'ST_STM32F769I_DISCOVERY'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F7xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=ON -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Pwm=ON -DAPI_Windows.Devices.SerialCommunication=ON'
      - BOARD_NAME: 'NETDUINO3_WIFI'
        BUILD_OPTIONS: '-DTARGET_SERIES=STM32F4xx -DUSE_FPU=TRUE -DNF_FEATURE_DEBUGGER=TRUE -DSWO_OUTPUT=OFF -DNF_FEATURE_RTC=ON -DAPI_Windows.Devices.Gpio=ON -DAPI_Windows.Devices.Pwm=ON'
        NEEDS_DFU: 'True'

  matrix:
    fast_finish: true

  cache:
    - '%GNU_GCC_TOOLCHAIN_PATH%'

  install:
    - set PATH=C:\Ruby%RUBY_VERSION%\bin;%PATH%
    - set PATH=%NINJA_PATH%;%PATH%

    - gem install github_changelog_generator --quiet --no-ri --no-rdoc
    - choco install gitversion.portable -pre -y

    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {

        }
        ElseIf($env:BOARD_NAME -eq "ESP32_DEVKITC")
        {
          .\install-esp32-toolchain.ps1
          .\install-ninja.ps1
          .\install-esp32-libs.ps1
          .\install-esp32-idf.ps1
        }
        Else
        {
          # get build matrix
          .\get-stm32-targets-to-build.ps1

          # install tools and utilities
          .\install-arm-gcc-toolchain.ps1
          .\install-ninja.ps1
          .\install-nf-hex2dfu.ps1
        }

  build:
    verbosity: minimal

  before_build:
    - md build
    - ps: |

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
        
        }
        Else
        {
          gitversion /l console /output buildserver

          cd build
          $cmake = "cmake"

          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            # need to split the build options into an array to properly pass those as CMake arguments
            $separator = " "
            $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
            $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

             &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:ESP32_TOOLCHAIN_PATH" "-DESP32_IDF_PATH=$env:ESP32_IDF_PATH" "-DESP32_LIBS_PATH=$env:ESP32_LIBS_PATH" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
          }
          Else
          {
            if(!$global:BUILD_MATRIX)
            {
              # need to split the build options into an array to properly pass those as CMake arguments
              $separator = " "
              $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
              $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

              If($env:NEEDS_DFU -eq 'True')
              {
                $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
              }

              &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions "-DBUILD_VERSION=$env:GitVersion_AssemblySemVer" ..
            }
          }
        }

  build_script:
    - ps: |

        Install-Module 7Zip4PowerShell -Force

        If($env:BOARD_NAME -eq "NANOCLR_WINDOWS")
        {
          msbuild targets\os\win32\nanoCLR.sln /p:Configuration=Release /p:Platform=x86 /m /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        }
        Else
        {
          If($env:BOARD_NAME -eq "ESP32_DEVKITC")
          {
            $cmake = "cmake"
            &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

            if ($lastexitcode -ne 0)
            {
              throw [System.Exception] "CMake build failed with exit code $lastexitcode."
            }

            Copy-Item -Path $env:ESP32_LIBS_PATH\bootloader.bin -Destination bootloader.bin
            Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion

            #upload package only if this not a PR
            if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
            {
              $webClient = New-Object System.Net.WebClient
              $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
              $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
            }
          }
          Else
          {
            # STM32 target
            if(!$global:BUILD_MATRIX)
            {
              # single STM32 target
              $cmake = "cmake"
              &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

              if ($lastexitcode -ne 0)
              {
                throw [System.Exception] "CMake build failed with exit code $lastexitcode."
              }

              Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
              Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              If($env:NEEDS_DFU -eq 'True')
              {
                Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
              }

              #upload package only if this not a PR
              if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
              {
                $webClient = New-Object System.Net.WebClient
                $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
              }
            }
            else
            {
              # build matrix for STM32 targets
              ForEach($item in $global:BUILD_MATRIX)
              {
                $env:BOARD_NAME = $item[0]
                $env:BUILD_OPTIONS = $item[1]
                $env:NEEDS_DFU = $item[2]

                $cmake = "cmake"

                # need to split the build options into an array to properly pass those as CMake arguments
                $separator = " "
                $splitOption = [System.StringSplitOptions]::RemoveEmptyEntries
                $cmakeOptions = $env:BUILD_OPTIONS.Split($separator, $splitOption)

                If($env:NEEDS_DFU -eq 'True')
                {
                    $cmakeOptions += "-DTOOL_HEX2DFU_PREFIX=$env:HEX2DFU_PATH".Replace('\','/')
                }

                &$cmake -G Ninja "-DTOOLCHAIN_PREFIX=$env:GNU_GCC_TOOLCHAIN_PATH" "-DCHIBIOS_BOARD=$env:BOARD_NAME" "-DCMAKE_BUILD_TYPE=$env:CONFIGURATION" $cmakeOptions ..

                &$cmake --build (Get-Location).path --target all --config "$env:CONFIGURATION"

                if ($lastexitcode -ne 0)
                {
                  throw [System.Exception] "CMake build failed with exit code $lastexitcode."
                }

                Compress-7Zip -Path . -Filter "*.bin" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion
                Compress-7Zip -Path . -Filter "*.hex" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                Compress-7Zip -Path . -Filter "*.s19" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                If($env:NEEDS_DFU -eq 'True')
                {
                  Compress-7Zip -Path . -Filter "*.dfu" -ArchiveFileName $env:BOARD_NAME-$env:GitVersion_SemVer.zip -DisableRecursion -Append
                }
                
                #upload package only if this not a PR
                if(!$env:APPVEYOR_PULL_REQUEST_NUMBER)
                {
                  $webClient = New-Object System.Net.WebClient
                  $webClient.Credentials = new-object System.Net.NetworkCredential("nfbot", $env:BinTrayKey)
                  $webClient.UploadFile("https://api.bintray.com/content/nfbot/nanoframework-images-dev/$env:BOARD_NAME/$env:GitVersion_SemVer/$env:BOARD_NAME-$env:GitVersion_SemVer.zip;publish=1", "PUT", "$env:APPVEYOR_BUILD_FOLDER\build\$env:BOARD_NAME-$env:GitVersion_SemVer.zip")
                }

                cd ..
                Rename-Item -NewName build-$env:BOARD_NAME -Path "build" -Force
                md build
                cd build
              }
            }            
          }          
        }

  test: off

  artifacts:
    - path: '**\*.zip'
      name: nanoImage

  # before_deploy:
  #   # need this to keep ruby happy
  #   - ps: md c:\tmp
  #   - bundle exec github_changelog_generator --token %GitHubToken%
  #   # add here the updated changelog and the updated assembly info files
  #   - git add .
  #   - git commit --amend --no-edit

  notifications:
    - provider: Slack
      auth_token:
        secure: 2tqAJTTbN2dm24Vrwo5TXun3Vxc34R5G9l7o3pK3xEuKZAzxx3nbP2yGkMI/kl3+NxHXknjBfZnkhZC5eLYBHb+jO7YVUZwPYOfC/ZGy5HU=
      channel: '#build-monitor'
      on_build_status_changed: true
      on_build_success: false
      on_build_failure: false
