trigger: none

pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework
    - repository: esp32_idf
      type: github
      name: espressif/esp-idf
      endpoint: nanoframework
      ref: refs/tags/v4.4.4
    
# scheduled build
# the schedule is defined at the AZDO web interface because of inconsistencies with time zones

jobs:

##############################
- job: Check_Build_Options
  pool:
    vmImage: 'windows-latest'

  variables:
    DOTNET_NOLOGO: true

  steps:
  - checkout: self
    fetchDepth: 1

  - template: azure-pipelines-templates/get-commit-details.yml@templates

  # check build options
  - powershell: |

      if($env:Build_Reason -eq "Schedule")
      {
          # scheduled daily build: get commit date 
          $commitDate = git show -s --format=%cd --date=short
          $commitDate = [DateTime]$commitDate

          "Last commit dated $commitDate" | Write-Host

          $yesterdayDate = [System.DateTime]::UtcNow.AddDays(-1).Date
          "Comparing with $yesterdayDate" | Write-Host
          
          # shceduled build is at start of day, so check if commit date was from yesterday
          if($commitDate -eq $yesterdayDate)
          {
              # last commit was yesterday, build images
              echo "##vso[task.setvariable variable=CHECK_CHANGES;isOutput=true]true" 
              "**Commits from today. Go and check what changed.**" | Write-Host
          }
          else
          {
            # last commit is older than yesterday, skip build
            "***************************************************" | Write-Host
            "* Last commit is older than today, skipping build *" | Write-Host
            "***************************************************" | Write-Host
            echo "##vso[task.setvariable variable=CHECK_CHANGES;isOutput=true]false"
          }
      }
      else
      {
          # build for other reasons: build depending on target tag
          echo "##vso[task.setvariable variable=CHECK_CHANGES;isOutput=true]true"

          if ($env:System_PullRequest_PullRequestId -ne $null)
          {
            "**This is a PR build**" | Write-Host
          }
          else
          {
            "**build for other reasons**" | Write-Host
          }
      }

    name: BuildOptions
    displayName: Get build options

  # check what changed
  - powershell: |
      git config --global user.email "nfbot"
      git config --global user.name "nanoframework@outlook.com"

      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":$(GitHubToken)")))"
      
      $buildingPr = $env:System_PullRequest_PullRequestId -ne $null

      # set default values
      echo "##vso[task.setvariable variable=BUILD_CHIBIOS;isOutput=true]false"  
      echo "##vso[task.setvariable variable=BUILD_ESP32;isOutput=true]false"  
      echo "##vso[task.setvariable variable=BUILD_TI;isOutput=true]false"  
      echo "##vso[task.setvariable variable=BUILD_AZURERTOS;isOutput=true]false"
      echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]false"  

      if($env:StartReleaseCandidate -like "true")
      {
          # this is a release prep so NO build
          Write-host "Start Release candidate build, don't build"
      }
      else
      {
          # check if this build was triggered by the pipeline itself
          if($env:Build_Reason -eq "Manual")
          {
              # this is a manual build, no need to check anything 
              Write-host "Manual build"
          }
          else
          {
            if($buildingPr)
            {
                # get files changed in PR, if this is a PR
                $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nf-interpreter/pulls/$env:System_PullRequest_PullRequestNumber/files" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

                # filter removed files              
                $files = $commit.where{$_.status -ne 'removed'}

                # get file names only
                $files = $files | % {$_.filename}
            }
            else
            {
                # scheduled build, grab repo history for the last day
                $commitHistory = git log --name-status --since=1.day --format=

                # filter removed files              
                $files = $commitHistory.where{$_[0] -ne 'D'}

                # get file names only
                $files = $files | % {$_.SubString(2)}
            }

            Write-host "Files changed:"
            $files | % { Write-host $_ }
            Write-host ""

            if(
                (($files.where{$_.Contains('/')}).Count -eq 0) -Or
                (($files.where{$_.StartsWith('azure-pipelines-templates')}).Count -gt 0) -Or
                (($files.where{$_.StartsWith('CMake')}).Count -gt 0) -Or
                (($files.where{$_.StartsWith('src')}).Count -gt 0)
              )
            {
                # files at:
                # - repo root
                # - azure-pipelines-templates
                # - CMake
                # - src

                if($buildingPr)
                {
                    # ChibiOS targets are the only ones needing to be build on a global change
                    echo "##vso[task.setvariable variable=BUILD_CHIBIOS;isOutput=true]true"
                    Write-host "Building ChibiOS targets"
                }
                else
                {
                    echo "##vso[task.setvariable variable=BUILD_ALL;isOutput=true]true"
                    Write-host "Building ALL targets"
                }              
            }

            if($buildingPr)
            {
                if( 
                    ($files.where{$_.Contains('targets/ChibiOS/_common')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_FatFS')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_include')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_Lwip')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_nanoBooter')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_nanoCLR')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_FatFS')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_nf-overlay')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/_spiffs')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/ORGPAL_PALTHREE')}).Count -gt 0 -Or
                    ($files.where{$_.Contains('targets/ChibiOS/ST_NUCLEO64_F091RC')}).Count -gt 0
                  )
                {
                    # files at ChibiOS global folders or targets being built with this pipeline
                    echo "##vso[task.setvariable variable=BUILD_CHIBIOS;isOutput=true]true"

                    Write-host "Building ChibiOS targets"
                }
            }
            else
            {
                if( ($files.where{$_.Contains('targets/ChibiOS')}).Count -gt 0)
                {
                    # files at ChibiOS folder
                    echo "##vso[task.setvariable variable=BUILD_CHIBIOS;isOutput=true]true"

                    Write-host "Building ChibiOS targets"
                }
            }

            if(
              !$buildingPr -And 
              ($files.where{$_.Contains('targets/ESP32')}).Count -gt 0)
            {
                # files at ESP32 folder
                echo "##vso[task.setvariable variable=BUILD_ESP32;isOutput=true]true"

                Write-host "Building ESP32 targets"
            }

            if(
              !$buildingPr -And
              ($files.where{$_.Contains('targets/TI_SimpleLink')}).Count -gt 0)
            {
                # files at TI_SimpleLink folder
                echo "##vso[task.setvariable variable=BUILD_TI;isOutput=true]true"

                Write-host "Building TI SimpleLink targets"
            }

            if( 
              !$buildingPr -And
              ($files.where{$_.Contains('targets/AzureRTOS')}).Count -gt 0)
            {
                # files at AzureRTOS folder
                echo "##vso[task.setvariable variable=BUILD_AZURERTOS;isOutput=true]true"

                Write-host "Building Azure RTOS targets"
            }
          }
      }

    name: TargetsToBuild
    displayName: Get targets to build
    condition: eq(variables['BuildOptions.CHECK_CHANGES'], 'True')

################
# STM32
- job: Build_STM32_targets
  condition: >-
    or(
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_ALL'], true),
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_CHIBIOS'], true),
      contains(dependencies.Check_Build_Options.outputs['GetCommitDetails.COMMIT_MESSAGE'], '***BUILD_ALL***'),
      and(
        eq(variables['Build.Reason'], 'Manual'),
        or(
          eq(variables['BUILD_ALL__'], 'true'),
          eq(variables['BUILD_CHIBIOS__'], 'true')
        )
      )
    )
  dependsOn:
  - Check_Build_Options

  pool:
    vmImage: 'windows-latest'

  strategy:
    matrix:
      ORGPAL_PALTHREE:
        TargetBoard: ORGPAL_PALTHREE
        TargetSeries: 'stm32f7xx'
        BuildOptions: 
        NeedsDFU: true
        NeedsSRECORD: false
        CMakePreset: ORGPAL_PALTHREE

      ST_NUCLEO64_F091RC:
        TargetBoard: ST_NUCLEO64_F091RC
        TargetSeries: 'stm32f0xx'
        BuildOptions: 
        NeedsDFU: false
        NeedsSRECORD: true
        CMakePreset: ST_NUCLEO64_F091RC

  variables:
    DOTNET_NOLOGO: true
    # creates a counter and assigns it to the revision variable
    REVISION: $[counter('STM32_1_8_1_versioncounter', 0)]
    HelperPackageVersion: $[counter('HelperPackageVersioncounter', 0)]
    GccArm_Version: ''
    TargetPlatform: 'stm32'

  steps:
  - template: azure-pipelines-templates/build-preparations.yml
  - template: azure-pipelines-templates/nb-gitversioning.yml
  - template: azure-pipelines-templates/download-install-arm-gcc-toolchain.yml
  - template: azure-pipelines-templates/download-install-ninja.yml
  - template: azure-pipelines-templates/download-srecord.yml
  - template: azure-pipelines-templates/download-hexdfu.yml
  - template: azure-pipelines-templates/build-chibios-stm32-targets.yml
  - template: azure-pipelines-templates/pack-publish-artifacts.yml
  - template: azure-pipelines-templates/publish-cloudsmith.yml
  - template: azure-pipelines-templates/pack-publish-managed-helpers.yml

#################
# ESP32 targets
- job: Build_ESP32_targets
  condition: >-
    or(
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_ALL'], true),
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_ESP32'], true),
      contains(dependencies.Check_Build_Options.outputs['GetCommitDetails.COMMIT_MESSAGE'], '***BUILD_ALL***'),
      and(
        eq(variables['Build.Reason'], 'Manual'),
        or(
          eq(variables['BUILD_ALL__'], 'true'),
          eq(variables['BUILD_ESP32__'], 'true')
        )
      )
    )  

  dependsOn:
  - Check_Build_Options

  pool:
    vmImage: 'windows-latest'

  strategy:
    matrix:
      ESP32_REV0:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        SDK_config: sdkconfig.default_nopsram.esp32
        IDF_Target: esp32
        TargetName: ESP32
        PackageName: ESP32_REV0
        CMakePreset: ESP32_REV0

      ESP32_PSRAM_REV3:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32
        PackageName: ESP32_PSRAM_REV3
        CMakePreset: ESP32_PSRAM_REV3

      ESP32_PSRAM_XTAL26_REV0:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32
        PackageName: ESP32_PSRAM_XTAL26_REV0
        CMakePreset: ESP32_PSRAM_XTAL26_REV0

      ESP32_REV3:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32
        PackageName: ESP32_REV3
        CMakePreset: ESP32_REV3

      ESP32_PICO:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions:
        IDF_Target: esp32
        TargetName: ESP32_PICO
        PackageName: ESP32_PICO
        CMakePreset: ESP32_PICO

      KALUGA_1:
        TargetBoard: ESP32_S2
        TargetSeries: 'esp32_s2'
        BuildOptions: 
        IDF_Target: esp32s2
        TargetName: KALUGA_1
        PackageName: KALUGA_1
        CMakePreset: KALUGA_1

      ESP32_BLE_REV3:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32
        PackageName: ESP32_BLE_REV3
        CMakePreset: ESP32_BLE_REV3

      ESP32_OLIMEX:
        TargetBoard: ESP32
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32_OLIMEX
        PackageName: ESP32_OLIMEX
        CMakePreset: ESP32_OLIMEX

      M5StickC:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: M5StickC
        PackageName: M5StickC
        CMakePreset: M5StickC

      M5StickCPlus:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: M5StickCPlus
        PackageName: M5StickCPlus
        CMakePreset: M5StickCPlus

      M5Core:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: M5Core
        PackageName: M5Core
        CMakePreset: M5Core

      M5Core2:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: M5Core2
        PackageName: M5Core2
        CMakePreset: M5Core2

      ESP32_C3_REV3:
        TargetBoard: ESP32_C3
        TargetSeries: 'esp32c3'
        BuildOptions: 
        IDF_Target: esp32c3
        TargetName: ESP32_C3_REV3
        PackageName: ESP32_C3_REV3
        CMakePreset: ESP32_C3_REV3

      ESP32_GenericDisplay_REV0:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32_GenericDisplay_REV0
        PackageName: ESP32_GenericDisplay_REV0
        CMakePreset: ESP32_GenericDisplay_REV0

      ESP32_PSRAM_BLE_GenericGraphic_REV3:
        TargetBoard: ESP32
        TargetPlatform: 'esp32'
        TargetSeries: 'esp32'
        BuildOptions: 
        IDF_Target: esp32
        TargetName: ESP32_PSRAM_BLE_GenericGraphic_REV3
        PackageName: ESP32_PSRAM_BLE_GenericGraphic_REV3
        CMakePreset: ESP32_PSRAM_BLE_GenericGraphic_REV3

      XIAO_ESP32C3:
        TargetBoard: ESP32_C3
        TargetSeries: 'esp32c3'
        BuildOptions: 
        IDF_Target: esp32c3
        TargetName: XIAO_ESP32C3
        PackageName: XIAO_ESP32C3
        CMakePreset: XIAO_ESP32C3

      ESP32_S3_BLE:
        TargetBoard: ESP32_S3
        TargetSeries: 'esp32s3'
        BuildOptions: 
        IDF_Target: esp32s3
        TargetName: ESP32_S3_BLE
        PackageName: ESP32_S3_BLE
        CMakePreset: ESP32_S3_BLE

  variables:
    DOTNET_NOLOGO: true
    # creates a counter and assigns it to the revision variable
    REVISION: $[counter('ESP32_1_8_1_versioncounter', 0)]
    IDF_PATH: 'D:/a/1/s/esp-idf'
    PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
    TargetPlatform: 'esp32'

  steps:
  - checkout: self
  - checkout: esp32_idf
    fetchDepth: 1

  - template: azure-pipelines-templates/build-preparations.yml
    parameters:
      repoDirectory: '$(Build.SourcesDirectory)\nf-interpreter'
  - template: azure-pipelines-templates/nb-gitversioning.yml
    parameters:
      repoDirectory: '$(Build.SourcesDirectory)\nf-interpreter'
  - template: azure-pipelines-templates/download-install-esp32-build-components.yml
  - template: azure-pipelines-templates/download-install-ninja.yml
    parameters:
      repoDirectory: '$(Build.SourcesDirectory)\nf-interpreter'
  - template: azure-pipelines-templates/build-espressif-esp32-targets.yml

  - task: CopyFiles@2
    condition: succeeded()
    displayName: Copying bootloader
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)\nf-interpreter\build\bootloader'
      Contents: |
        bootloader.bin
      TargetFolder: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)'
      flattenFolders: true
      ignoreMakeDirErrors: true

  - template: azure-pipelines-templates/copy-sdkconfig.yml
  - template: azure-pipelines-templates/pack-publish-artifacts.yml
    parameters:
      buildDirectory: '$(Build.SourcesDirectory)\nf-interpreter\build'
  - template: azure-pipelines-templates/publish-cloudsmith.yml
  - template: azure-pipelines-templates/publish-sdkconfig.yml

#################
# TI SimpleLink
- job: Build_TI_SimpleLink_targets
  condition: >-
    or(
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_ALL'], true),
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_TI'], true),
      contains(dependencies.Check_Build_Options.outputs['GetCommitDetails.COMMIT_MESSAGE'], '***BUILD_ALL***'),
      and(
        eq(variables['Build.Reason'], 'Manual'),
        or(
          eq(variables['BUILD_ALL__'], 'true'),
          eq(variables['BUILD_TI__'], 'true')
        )
      )
    )  

  dependsOn:
  - Check_Build_Options

  pool:
    vmImage: 'windows-latest'

  strategy:
    matrix:
      TI_CC1352R1_LAUNCHXL_868:
        TargetBoard: TI_CC1352R1_LAUNCHXL
        PackageName: TI_CC1352R1_LAUNCHXL_868
        TargetSeries: 'CC13X2'
        BuildOptions: >-
          -DRADIO_FREQUENCY=868
        GccArm_Version:
        CMakePreset: TI_CC1352R1_LAUNCHXL

  variables:
    DOTNET_NOLOGO: true
    # creates a counter and assigns it to the revision variable
    REVISION: $[counter('TI_1_8_1_versioncounter', 0)]
    HelperPackageVersion: $[counter('HelperPackageVersioncounter', 0)]
    TargetPlatform: 'ti_simplelink'

  steps:
  - template: azure-pipelines-templates/build-preparations.yml
  - template: azure-pipelines-templates/nb-gitversioning.yml
  - template: azure-pipelines-templates/download-install-arm-gcc-toolchain.yml
  - template: azure-pipelines-templates/download-install-ninja.yml
  - template: azure-pipelines-templates/build-ti-simplelink-targets.yml
  - template: azure-pipelines-templates/pack-publish-artifacts.yml
  - template: azure-pipelines-templates/publish-cloudsmith.yml
  - template: azure-pipelines-templates/pack-publish-ti-sl-managed-helpers.yml

#################
# Azure RTOS
- job: Build_Azure_RTOS_targets
  condition: >-
    or(
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_ALL'], true),
      eq(dependencies.Check_Build_Options.outputs['TargetsToBuild.BUILD_AZURERTOS'], true),
      contains(dependencies.Check_Build_Options.outputs['GetCommitDetails.COMMIT_MESSAGE'], '***BUILD_ALL***'),
      and(
        eq(variables['Build.Reason'], 'Manual'),
        or(
          eq(variables['BUILD_ALL__'], 'true'),
          eq(variables['BUILD_AZURERTOS__'], 'true')
        )
      )
    )

  dependsOn:
  - Check_Build_Options

  pool:
    vmImage: 'windows-latest'

  strategy:
    matrix:

      SL_STK3701A_REVB:
        TargetBoard: SL_STK3701A_REVB
        TargetSeries: 'efm32gg11'
        BuildOptions:
        GccArm_Version: 
        NeedsDFU: false
        NeedsSRECORD: false
        TargetName: SL_STK3701A_REVB
        PackageName: SL_STK3701A_REVB
        CMakePreset: SL_STK3701A_REVB

  variables:
    # creates a counter and assigns it to the revision variable
    REVISION: $[counter('AZURERTOS_1_8_1_versioncounter', 0)]
    HelperPackageVersion: $[counter('HelperPackageVersioncounter', 0)]
    TargetPlatform: 'azure_rtos'

  steps:
  - template: azure-pipelines-templates/build-preparations.yml
  - template: azure-pipelines-templates/nb-gitversioning.yml
  - template: azure-pipelines-templates/download-install-arm-gcc-toolchain.yml
  - template: azure-pipelines-templates/download-install-ninja.yml
  - template: azure-pipelines-templates/download-hexdfu.yml
  - template: azure-pipelines-templates/download-srecord.yml
  - template: azure-pipelines-templates/build-azurertos-targets.yml
  - template: azure-pipelines-templates/pack-publish-artifacts.yml
  - template: azure-pipelines-templates/publish-cloudsmith.yml
  - template: azure-pipelines-templates/pack-publish-managed-helpers.yml

#################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Build_STM32_targets
  - Build_ESP32_targets
  - Build_TI_SimpleLink_targets
  - Build_Azure_RTOS_targets
  condition: >-
    or(
      failed('Build_STM32_targets'),
      failed('Build_ESP32_targets'),
      failed('Build_TI_SimpleLink_targets'),
      failed('Build_Azure_RTOS_targets')
    )

  pool:
    vmImage: 'windows-latest'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
