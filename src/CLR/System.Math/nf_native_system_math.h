//
// Copyright (c) .NET Foundation and Contributors
// See LICENSE file in the project root for full license information.
//

#ifndef _NF_NATIVE_SYSTEM_MATH_H_
#define _NF_NATIVE_SYSTEM_MATH_H_

#include <nanoCLR_Interop.h>
#include <nanoCLR_Runtime.h>
// #include <corlib_native.h>

struct Library_nf_native_system_math_System_Math
{
    NANOCLR_NATIVE_DECLARE(Abs___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Abs___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Acos___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Acos___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Asin___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Asin___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Atan___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Atan___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Atan2___STATIC__R8__R8__R8);
    NANOCLR_NATIVE_DECLARE(Atan2___STATIC__R4__R4__R4);
    NANOCLR_NATIVE_DECLARE(Ceiling___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Ceiling___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Cos___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Cos___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Cosh___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Cosh___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(IEEERemainder___STATIC__R8__R8__R8);
    NANOCLR_NATIVE_DECLARE(IEEERemainder___STATIC__R4__R4__R4);
    NANOCLR_NATIVE_DECLARE(Exp___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Exp___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Floor___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Floor___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Log___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Log___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Log10___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Log10___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Max___STATIC__R8__R8__R8);
    NANOCLR_NATIVE_DECLARE(Max___STATIC__R4__R4__R4);
    NANOCLR_NATIVE_DECLARE(Min___STATIC__R8__R8__R8);
    NANOCLR_NATIVE_DECLARE(Min___STATIC__R4__R4__R4);
    NANOCLR_NATIVE_DECLARE(Pow___STATIC__R8__R8__R8);
    NANOCLR_NATIVE_DECLARE(Pow___STATIC__R4__R4__R4);
    NANOCLR_NATIVE_DECLARE(Round___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Round___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Sign___STATIC__I4__R8);
    NANOCLR_NATIVE_DECLARE(Sign___STATIC__I4__R4);
    NANOCLR_NATIVE_DECLARE(Sin___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Sin___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Sinh___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Sinh___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Sqrt___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Sqrt___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Tan___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Tan___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Tanh___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Tanh___STATIC__R4__R4);
    NANOCLR_NATIVE_DECLARE(Truncate___STATIC__R8__R8);
    NANOCLR_NATIVE_DECLARE(Truncate___STATIC__R4__R4);

    //--//

};

extern const CLR_RT_NativeAssemblyData g_CLR_AssemblyNative_System_Math;

#endif  //_NF_NATIVE_SYSTEM_MATH_H_
