# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

# To publish builds of targets in branches other than develop
# set 'ForceUpload' variable to true on target matrix

steps:

  - task: ArchiveFiles@2
    condition: and( succeeded(), or(eq(variables['ForceUpload'], true), ne(variables['System.PullRequest.PullRequestId'], ''), eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.Repository.Name'], 'nanoframework/nf-Community-Targets') ) )
    displayName: Zip binary files (release & PR)
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)' 
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Agent.TempDirectory)\$(TargetPublishName)-$(NBGV_AssemblyVersion).zip'
      replaceExistingArchive: true

  - task: CopyFiles@1
    condition: and( succeeded(), or(eq(variables['ForceUpload'], true), ne(variables['System.PullRequest.PullRequestId'], ''), eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.Repository.Name'], 'nanoframework/nf-Community-Targets') ) )
    displayName: Collecting deployable artifacts (release & PR)
    inputs:
      sourceFolder: $(Agent.TempDirectory)
      Contents: |
        $(TargetPublishName)-$(NBGV_AssemblyVersion).zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)'
      flattenFolders: true

  - task: ArchiveFiles@2
    condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or(eq(variables['ForceUpload'], true), startsWith(variables['Build.SourceBranchName'], 'develop') ) )
    displayName: Zip binary files (preview)
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)' 
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Agent.TempDirectory)\$(TargetPublishName)-$(NBGV_SimpleVersion)-preview.$(TARGET_BUILD_COUNTER).zip'
      replaceExistingArchive: true

  - task: CopyFiles@1
    condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or(eq(variables['ForceUpload'], true), startsWith(variables['Build.SourceBranchName'], 'develop') ) )
    displayName: Collecting deployable artifacts (preview)
    inputs:
      sourceFolder: $(Agent.TempDirectory)
      Contents: |
        $(TargetPublishName)-$(NBGV_SimpleVersion)-preview.$(TARGET_BUILD_COUNTER).zip
      TargetFolder: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)'
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    condition: succeeded()
    displayName: Publish deployables artifacts
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(TargetPublishName)'
      ArtifactName: $(TargetPublishName)
      ArtifactType: Container

  # execute on 'ForceUpload' parameter
  - task: PowerShell@2
    condition: or( eq(variables['ForceUpload'], true), and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or( eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'main'), contains(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.Repository.Name'], 'nanoframework/nf-Community-Targets') ) ) )
    displayName: Set Cloudsmith repo path
    inputs:
      targetType: 'inline'
      script: |

          $repoName = $env:Build_Repository_Name
          $branchName = $env:Build_SourceBranchName

          Write-Host "repo name is: $repoName"
          Write-Host "branch name is: $branchName"

          if( $env:Build_Repository_Name -like "*nf-Community-Targets" )
          {
            # this is a build for a community target
            Write-Host "$("##vso[task.setvariable variable=CLOUDSMITH_REPO]")nanoframework-images-community-targets"
            # set publishing package name
            Write-Host "$("##vso[task.setvariable variable=PUBLISHING_PACKAGE_NAME]")$(TargetPublishName)-$(NBGV_AssemblyVersion)"
            # set version
            Write-Host "$("##vso[task.setvariable variable=PACKAGE_VERSION]")$(NBGV_AssemblyVersion)"
          }
          else
          {
            if( $env:Build_SourceBranchName -match "^develop*" -or 
                $env:Build_SourceBranchName -match "^release*" )
            {
              # this a dev or release branch, publish to Cloudsmith dev repo
              Write-Host "$("##vso[task.setvariable variable=CLOUDSMITH_REPO]")nanoframework-images-dev"
              # set publishing package name
              Write-Host "$("##vso[task.setvariable variable=PUBLISHING_PACKAGE_NAME]")$(TargetPublishName)-$(NBGV_SimpleVersion)-preview.$(TARGET_BUILD_COUNTER)"
              # set version
              Write-Host "$("##vso[task.setvariable variable=PACKAGE_VERSION]")$(NBGV_SimpleVersion)-preview.$(TARGET_BUILD_COUNTER)"
            }
            else 
            {
              # this main branch, publish to Cloudsmith stable repo
              Write-Host "$("##vso[task.setvariable variable=CLOUDSMITH_REPO]")nanoframework-images"
              # set publishing package name
              Write-Host "$("##vso[task.setvariable variable=PUBLISHING_PACKAGE_NAME]")$(TargetPublishName)-$(NBGV_AssemblyVersion)"
              # set version
              Write-Host "$("##vso[task.setvariable variable=PACKAGE_VERSION]")$(NBGV_AssemblyVersion)"
            }
          }
      errorActionPreference: 'stop'
      failOnStderr: 'true'

  - task: PowerShell@2
    condition: or( eq(variables['ForceUpload'], true), and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or( eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'main'), contains(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.Repository.Name'], 'nanoframework/nf-Community-Targets') ) ) )
    displayName: Upload package to Cloudsmith
    inputs:
      targetType: 'inline'
      script: |

          # update pip (until the build agent image is updated)
          python -m pip install --upgrade pip

          # install Cloudsmith CLI
          python -m pip install --upgrade cloudsmith-cli

          Write-Host "Uploading $(PUBLISHING_PACKAGE_NAME) v$(PACKAGE_VERSION)"

          cloudsmith push raw net-nanoframework/$(CLOUDSMITH_REPO) $(Agent.TempDirectory)\$(PUBLISHING_PACKAGE_NAME).zip --name $(TargetPublishName) --version $(PACKAGE_VERSION) --tags $(TargetPlatform),$(TargetSeries) -k $(CLOUDSMITH_KEY)

      errorActionPreference: 'stop'
      failOnStderr: 'false'
