# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

# To publish builds of targets in branches other than develop
# set 'ForceUpload' variable to true on target matrix

steps:

  # execute on 'ForceUpload' parameter
  - task: PowerShell@2
    condition: or( eq(variables['ForceUpload'], true), and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or( eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], ''), contains(variables['Build.SourceBranchName'], 'release') ) ) )
    displayName: Set Cloudsmith repo path
    inputs:
      targetType: 'inline'
      script: |
          $repoName = $env:Build_Repository_Name
          $branchName = $env:Build_SourceBranchName

          Write-Host "repo name is: $repoName"
          Write-Host "branch name is: $branchName"

          if( $env:Build_SourceBranchName -match "^develop*" -or 
              $env:Build_SourceBranchName -match "^release*" )
          {
            # this a dev or release branch, publish to Cloudsmith dev repo
            Write-Host "$("##vso[task.setvariable variable=CLOUDSMITH_REPO]")nanoframework-images-dev"
            # set version
            Write-Host "$("##vso[task.setvariable variable=PACKAGE_VERSION]")$(NBGV_NuGetPackageVersion)"
          }
          else 
          {
            # this main branch, publish to Cloudsmith stable repo
            Write-Host "$("##vso[task.setvariable variable=CLOUDSMITH_REPO]")nanoframework-images"
            # set version
            Write-Host "$("##vso[task.setvariable variable=PACKAGE_VERSION]")$(NBGV_AssemblyVersion)"
          }
      errorActionPreference: 'stop'
      failOnStderr: 'true'

  - task: PowerShell@2
    condition: or( eq(variables['ForceUpload'], true), and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), or( eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], ''), contains(variables['Build.SourceBranchName'], 'release') ) ) )
    displayName: Upload WIN32 nanoCLR to Cloudsmith
    inputs:
      targetType: 'inline'
      script: |

          # update pip (until the build agent image is updated)
          python -m pip install --upgrade pip

          # install Cloudsmith CLI
          python -m pip install --upgrade cloudsmith-cli

          Write-Host "Uploading nanoFramework.nanoCLR.exe v$(PACKAGE_VERSION)"

          cloudsmith push raw net-nanoframework/$(CLOUDSMITH_REPO) $(Build.ArtifactStagingDirectory)\$(TargetPublishName)\nanoFramework.nanoCLR.exe --name $(TargetPublishName) --version $(PACKAGE_VERSION) -k $(CLOUDSMITH_KEY)

      errorActionPreference: 'stop'
      failOnStderr: 'false'
